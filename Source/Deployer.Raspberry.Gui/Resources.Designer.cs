//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Deployer.Raspberry.Gui {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Deployer.Raspberry.Gui.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WOA Deployer for Raspberry Pi v{0}.
        /// </summary>
        public static string AppTitle {
            get {
                return ResourceManager.GetString("AppTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: The deployment operation will DELETE all the data in the selected disk:
        ///
        ///{0}
        ///
        ///Please, confirm that you want to continue.
        ///.
        /// </summary>
        public static string DeploymentConfirmationMessage {
            get {
                return ResourceManager.GetString("DeploymentConfirmationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm deployment.
        /// </summary>
        public static string DeploymentConfirmationTitle {
            get {
                return ResourceManager.GetString("DeploymentConfirmationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done.
        /// </summary>
        public static string Done {
            get {
                return ResourceManager.GetString("Done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drivers have been injected correctly.
        /// </summary>
        public static string DriversInjectedSucessfully {
            get {
                return ResourceManager.GetString("DriversInjectedSucessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished.
        /// </summary>
        public static string Finished {
            get {
                return ResourceManager.GetString("Finished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid WIM file.
        /// </summary>
        public static string InvalidWimFile {
            get {
                return ResourceManager.GetString("InvalidWimFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manual steps.
        /// </summary>
        public static string ManualStepsTitle {
            get {
                return ResourceManager.GetString("ManualStepsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disclaimer Notice and Terms of Use.
        /// </summary>
        public static string TermsOfUseTitle {
            get {
                return ResourceManager.GetString("TermsOfUseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - This tool comes with no warranty. 
        ///- The authors can&apos;t be hold responsible for any damage it may cause to your device.    
        ///- This tool intended for usage with Lumia 950 and 950 XL **ONLY**.
        ///    
        ///By clicking &quot;OK&quot; you accept the aforementioned risks..
        /// </summary>
        public static string WarningNotice {
            get {
                return ResourceManager.GetString("WarningNotice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected .WIM file doesn&apos;t contain any image for ARM64. Please, select a .wim file that targets this architecture..
        /// </summary>
        public static string WimFileNoValidArchitecture {
            get {
                return ResourceManager.GetString("WimFileNoValidArchitecture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Images.
        /// </summary>
        public static string WimFilesFilter {
            get {
                return ResourceManager.GetString("WimFilesFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Done!
        ///
        ///Now, please, **eject the SD Card safely** to avoid data corruption issues and insert it into your Raspberry Pi. If it refuses to be ejected, restart your PC.
        ///
        ///## Booting directions
        ///- Insert the Micro SD card into your Raspberry Pi
        ///- Turn it on and wait for the UEFI console to load
        ///- Type &quot;exit&quot; + press [ENTER] and you will be presented with the **UEFI interface**
        ///- Go to the &apos;Boot Maintenance Manager&apos; menu and select &apos;Boot Options&apos;. Choose &apos;Change Boot Order&apos;
        ///- Select &apos;Change the order&apos;
        ///- [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WindowsDeployedSuccessfully {
            get {
                return ResourceManager.GetString("WindowsDeployedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deployment successful.
        /// </summary>
        public static string WindowsDeployedSuccessfullyTitle {
            get {
                return ResourceManager.GetString("WindowsDeployedSuccessfullyTitle", resourceCulture);
            }
        }
    }
}
